tbls
df <- html_table(tbls, fill = TRUE)[[1]] %>% select(-c(5,6))
df1 <- html_table(tbls, fill = TRUE)[[2]] %>% select(-5)
df2 <- html_table(tbls, fill = TRUE)[[3]] %>% select(-5)
meteor1 <- rbind(df,df1,df2)
df3 <- html_table(tbls, fill = TRUE)[[4]] %>% select(-5)
#colnames(df3)[4] <- c("Diameter (km)")
df4 <- html_table(tbls, fill = TRUE)[[5]] %>% select(-5)
colnames(df4)[4] <- c("Diameter(km)")
meteor2 <- rbind(df3,df4)
meteor <- rbind(meteor1, meteor2) %>% janitor::clean_names()
meteor$diameter_km <- gsub("\\[.*","",meteor$diameter_km) %>% as.numeric()
meteor$coordinates <- sapply(strsplit(meteor$coordinates, "/\\s*"), tail, 1)
meteor$coordinates <- gsub("\\s*\\([^\\)]+\\)","",meteor$coordinates)
temp <- str_split(meteor$coordinates,";") %>%
unlist() %>%
matrix(nrow = 2) %>%
t() %>% data.frame()
temp$X2 <- parse_number(temp$X2)
countries <- st_read("~/R/30DayMapChallenge/2022/3_polygons/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp")
meteor <- cbind(meteor,temp) %>% st_as_sf(coords = c("X2","X1")) %>% st_set_crs(st_crs(countries))
bg = "#141414"
txt_col <- "#F8FFDB"
plot <- countries %>%
ggplot()+
geom_sf(size=.1,color=bg, fill=txt_col)+
geom_sf(data = meteor,aes(size=diameter_km),color="#FF5F00")+
labs(title = "Impact craters on Earth",
subtitle = "The data is for the craters created by the impact of meteors or comets with the earth. 190 such incidents have been identified.\nVredefort crater in South Africa is the oldest and also the biggest crater with a diameter of 160 km. Wabar crater in\nSaudi Arabia is the youngest with a diameter of 0.1 km.",
caption = "Source: Wikipedia.org | Graphic: Abhinav Malasi",
size="Diameter (km):")+coord_polar()+
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
panel.grid = element_blank(),
legend.position = "top",
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
legend.key.size = unit(.75, "cm"),
legend.spacing.x = unit(.1, 'cm'),
plot.margin = margin(t=20,b=20),
plot.title = element_text(size = 90, face = "bold",hjust = .5, margin = margin(b=20)),
plot.subtitle = element_text(size=50,lineheight = .3, hjust = .5,margin = margin(b=20)),
plot.caption = element_text(size=30),
legend.title = element_text(size=40),
legend.text = element_text(size=35, color=txt_col),
text = element_text(family = text, color=txt_col))
ggsave("crater1.png", plot, width=12, height = 8, dpi = 400)
plot <- countries %>%
ggplot()+
geom_sf(size=.1,color=bg, fill=txt_col)+
geom_sf(data = meteor,aes(size=diameter_km),color="#FF5F00")+
labs(title = "Impact craters on Earth",
subtitle = "The data is for the craters created by the impact of meteors or comets with the earth. 190 such incidents have been identified.\nVredefort crater in South Africa is the oldest and also the biggest crater with a diameter of 160 km. Wabar crater in\nSaudi Arabia is the youngest with a diameter of 0.1 km.",
caption = "Source: Wikipedia.org | Graphic: Abhinav Malasi",
size="Diameter (km):")+coord_sf_polar()+
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
panel.grid = element_blank(),
legend.position = "top",
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
legend.key.size = unit(.75, "cm"),
legend.spacing.x = unit(.1, 'cm'),
plot.margin = margin(t=20,b=20),
plot.title = element_text(size = 90, face = "bold",hjust = .5, margin = margin(b=20)),
plot.subtitle = element_text(size=50,lineheight = .3, hjust = .5,margin = margin(b=20)),
plot.caption = element_text(size=30),
legend.title = element_text(size=40),
legend.text = element_text(size=35, color=txt_col),
text = element_text(family = text, color=txt_col))
plot <- countries %>%
ggplot()+
geom_sf(size=.1,color=bg, fill=txt_col)+
geom_sf(data = meteor,aes(size=diameter_km),color="#FF5F00")+
labs(title = "Impact craters on Earth",
subtitle = "The data is for the craters created by the impact of meteors or comets with the earth. 190 such incidents have been identified.\nVredefort crater in South Africa is the oldest and also the biggest crater with a diameter of 160 km. Wabar crater in\nSaudi Arabia is the youngest with a diameter of 0.1 km.",
caption = "Source: Wikipedia.org | Graphic: Abhinav Malasi",
size="Diameter (km):")+
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
panel.grid = element_blank(),
legend.position = "top",
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
legend.key.size = unit(.75, "cm"),
legend.spacing.x = unit(.1, 'cm'),
plot.margin = margin(t=20,b=20),
plot.title = element_text(size = 90, face = "bold",hjust = .5, margin = margin(b=20)),
plot.subtitle = element_text(size=50,lineheight = .3, hjust = .5,margin = margin(b=20)),
plot.caption = element_text(size=30),
legend.title = element_text(size=40),
legend.text = element_text(size=35, color=txt_col),
text = element_text(family = text, color=txt_col))
library(rvest)
library(tidyverse)
url = "https://www.flagcolorcodes.com/flags/country"
webpage =  read_html(url)
tbls <- html_nodes(webpage, "flag-list")
View(tbls)
tbls <- html_nodes(webpage, "flag-list color-boxes")
library(rgdal)
readOGR("C:/Users/amalasi/Downloads/Master_RC_Geo_Chapter_2022.gdb/Master_RC_Geo_Chapter_2022.gdb")
locations <- readOGR("C:/Users/amalasi/Downloads/Master_RC_Geo_Chapter_2022.gdb/Master_RC_Geo_Chapter_2022.gdb")
View(locations)
locations1 <- sf::st_read("C:/Users/amalasi/Downloads/Master_RC_Geo_Chapter_2022.gdb/Master_RC_Geo_Chapter_2022.gdb")
View(locations1)
glimpse(location)
glimpse(locations)
locations@polygons
locations@polygons %>% ggplot()+geom_sf()
locations@polygons %% as.data.frame() %>% ggplot()+geom_sf()
locations@polygons %% as.data.frame()
locations@polygons %% data.frame() %>% ggplot()+geom_sf()
bird <-st_read("C:/Users/amalasi/Downloads/003bean-goose")
bird %% ggplot()+geom_sf()
bird %>% ggplot()+geom_sf()
setwd("~/R/30DayMapChallenge/2022/15_food_drink")
setwd("~/R/30DayMapChallenge/2022/15_food_drink")
library(tidyverse)
library(sf)
meat <- read_csv("per-capita-meat-type.csv")
View(meat)
meat <- read_csv("per-capita-meat-type.csv") %>%
janitor::clean_names() %>%
filter(year==2019)
colnames(meat)[4:9]<- c("poultry","beef","sheep_goat","pork","others","seafood")
meat <- read_csv("per-capita-meat-type.csv") %>%
janitor::clean_names() %>%
filter(year==2019)
colnames(meat)[4:9]<- c("poultry","beef","sheep_goat","pork","others","seafood")
countries <- st_read("~/R/30DayMapChallenge/2022/3_polygons/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp")
View(countries)
meat <- read_csv("per-capita-meat-type.csv") %>%
janitor::clean_names() %>%
filter(year==2019) %>% na.omit()
colnames(meat)[4:9]<- c("poultry","beef","sheep_goat","pork","others","seafood")
world_meat <- merge(countries, meat, by.x="ISO_A3", by.y="code")
View(world_meat)
meat$max <- rowMaxs(meat[4:9,])
meat$max <- apply(meat[,4:9], 1, max)
View(meat)
meat %>% mutate(pop_meat = case_when(max == poultry ~ "Poultry",
max == beef ~ "Beef",
max == sheep_goat ~ "Sheep & Goat",
max == pork ~ "Pork",
max == others ~ "Others",
TRUE~"Fish & Seafood"))
world_meat <- merge(countries %>% select(ISO_A3), meat, by.x="ISO_A3", by.y="code")
View(world_meat)
meat <- meat %>% mutate(pop_meat = case_when(max == poultry ~ "Poultry",
max == beef ~ "Beef",
max == sheep_goat ~ "Sheep & Goat",
max == pork ~ "Pork",
max == others ~ "Others",
TRUE~"Fish & Seafood"))
world_meat <- merge(countries %>% select(ISO_A3), meat %>% select(1,2,11), by.x="ISO_A3", by.y="code")
world_meat %>% ggplot()+geom_sf(aes(fill=pop_meat))
setwd("~/R/30DayMapChallenge/2022/14_hexagons")
library(tidyverse)
library(sf)
library(raster)
library(showtext)
showtext_auto()
text="Open Sans"
sysfonts::font_families_google()
sysfonts::font_add_google(text,text)
txt="#EEEEEE"
bg = "#858585"
bg="#252525"
be_shp <- st_read("TF_POPULATION_GRID_3035_20200101.shp")
pop_den <- read_csv("TF_POPULATION_GRID_20200101.csv")
pop_den_gemente <- readxl::read_xlsx("Pop_density_en.xlsx",sheet = "2020",skip = 1) %>%
janitor::clean_names()
be_communes <- st_read("C:/Users/amalasi/Documents/R/Infographics/Maps/Belgium/sh_statbel_statistical_sectors_20200101.shp/sh_statbel_statistical_sectors_20200101.shp")
# convert coordinate to Lambert system
be_shp1 <- st_transform(be_shp,crs = 31370)
be_pop_den <- merge(be_shp1,pop_den,by.x="grd_newid",by.y="GRD_NEWID")
be_commune_den <- merge(be_communes,pop_den_gemente,by.x="CNIS5_2020",by.y="refnis")
View(be_commune_den)
be_shp %>% ggplot()+geom_sf()
be_shape <- st_read("Belgium_shapefile/be_1km.shp")
be_shape  %>% ggplot()+geom_sf()
View(be_shape)
View(be_shp1)
be_shape <- st_read("BELGIUM_-_Municipalities/BELGIUM_-_Municipalities.shp")
be_shape  %>% ggplot()+geom_sf()
st_centroid(be_shape$geometry)
Be_centroid <- st_centroid(be_shape$geometry)
be_centroid <- st_centroid(be_shape$geometry)
be_centroid  %>% ggplot()+geom_sf()
be_centroid  %>% ggplot()+geom_sf()+stat_summary_hex(bins=40,aes(z = CONSO),fun = "sum", colour="grey") +
be_centroid  %>% ggplot()+geom_sf()+stat_summary_hex(bins=40,aes(z = CONSO),fun = "sum", colour="grey")
be_centroid  %>% ggplot()+geom_sf()+stat_summary_hex(bins=40,aes(z = CONSO),fun = "sum", colour="grey")
be_centroid  %>% ggplot()+geom_sf()+stat_summary_hex(bins=40,fun = "sum", colour="grey")
be_centroid %>% extract(geometry, c('lat', 'lon'), '\\((.*), (.*)\\)', convert = TRUE)
?extract
be_centroid %>% tidyverse::extract(geometry, c('lat', 'lon'), '\\((.*), (.*)\\)', convert = TRUE)
be_centroid %>% tidyr::extract(geometry, c('lat', 'lon'), '\\((.*), (.*)\\)', convert = TRUE)
be_shape1 <- read_csv("BELGIUM_-_Municipalities.csv")
View(be_shp1)
be_centroid1 <- st_centroid(be_shape1$geometry)
be_shape1$geometry
View(be_shape1)
data.frame(st_coordinates(be_shape$geometry))
View(be_centroid)
be_centroid
data.frame(st_coordinates(be_centroid))
df = cbind(be_shape,data.frame(st_coordinates(be_centroid)))
View(df)
df %>% ggplot(aes(x, y))+
stat_summary_hex(bins=40,aes(z = OBJECTID),fun = "sum", colour="grey")
df %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=40,aes(z = OBJECTID),fun = "sum", colour="grey")
View(pop_den)
View(pop_den_gemente)
View(df)
View(be_commune_den)
merge(df, pop_den_gemente, by.x="CODE_INS",by.y="refnis")
df1 <-merge(df, pop_den_gemente, by.x="CODE_INS",by.y="refnis")
View(df1)
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=40,aes(z = population_km2),fun = "sum", colour="grey")
be_shape$CODE_INS %in% pop_den_gemente$refnis
View(be_shape)
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=40,aes(z = population_km2, size=size_in_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y, size=size_in_km2))+
stat_summary_hex(bins=40,aes(z = population_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y, size=size_in_km2))+
stat_summary_hex(bins=80,aes(z = population_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y, size=size_in_km2))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y, size=size_in_km2))+
stat_summary_hex(bins=10,aes(z = population_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y, size=size_in_km2))+
stat_summary_hex(bins=25,aes(z = population_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y, size=size_in_km2))+
stat_summary_hex(bins=30,aes(z = population_km2),fun = "sum", colour="grey")
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=30,aes(z = population_km2),fun = "sum", colour="grey") +
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))
View(be_shape)
pop_den_gemente <- pop_den_gemente %>% mutate(refnis = str_replace(refnis,12041,12030))
df1 <-merge(df, pop_den_gemente, by.x="CODE_INS",by.y="refnis")
pop_den_gemente <- pop_den_gemente %>%
mutate(refnis = str_replace(refnis,as.numeric(12041),12030))
pop_den_gemente <- pop_den_gemente %>%
mutate(refnis = str_replace(refnis,"12041","12030"))
df1 <-merge(df, pop_den_gemente, by.x="CODE_INS",by.y="refnis")
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))
be_shape$CODE_INS %in% pop_den_gemente$refnis
df1 <-merge(df, pop_den_gemente, by.x="CODE_INS",by.y="refnis",x = TRUE)
df1 <-merge(df, pop_den_gemente, by.x="CODE_INS",by.y="refnis",all.x = TRUE)
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))
df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10)),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35),
plot.caption = element_text(size=30,margin = margin(b=10,r=20)),
plot.margin = margin(t=20,b=10),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("raster.png",commune,width = 8,height = 8,units = "in",dpi=320)
coomune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10)),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35),
plot.caption = element_text(size=30,margin = margin(b=10,r=20)),
plot.margin = margin(t=20,b=10),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("raster.png",commune,width = 8,height = 8,units = "in",dpi=320)
commune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10)),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35),
plot.caption = element_text(size=30,margin = margin(b=10,r=20)),
plot.margin = margin(t=20,b=10),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("raster.png",commune,width = 8,height = 8,units = "in",dpi=320)
ggsave("hexagon.png",commune,width = 8,height = 8,units = "in",dpi=320)
ggsave("hexagon.png",commune,width = 10,height = 10,units = "in",dpi=320)
commune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10)),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35),
plot.caption = element_text(size=30,margin = margin(b=10,r=20)),
plot.margin = margin(t=20,b=10,20,r=20),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("hexagon.png",commune,width = 10,height = 10,units = "in",dpi=320)
commune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10),hjust=.1),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35,hjust=.1),
plot.caption = element_text(size=30,margin = margin(b=10,r=20)),
plot.margin = margin(t=20,b=10,20,r=20),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("hexagon.png",commune,width = 10,height = 10,units = "in",dpi=320)
commune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour="grey") +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10),hjust=.1),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35,hjust=.1),
plot.caption = element_text(size=30,margin = margin(t=10,b=10,r=20)),
plot.margin = margin(t=20,b=10,20,r=20),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("hexagon.png",commune,width = 10,height = 10,units = "in",dpi=320)
commune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour=NA) +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10),hjust=.1),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35,hjust=.1),
plot.caption = element_text(size=30,margin = margin(t=10,b=10,r=20)),
plot.margin = margin(t=20,b=10,20,r=20),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("hexagon.png",commune,width = 10,height = 10,units = "in",dpi=320)
commune <-df1 %>% ggplot(aes(X, Y))+
stat_summary_hex(bins=20,aes(z = population_km2),fun = "sum", colour=bg) +
labs(title = "Belgium",
subtitle = "Total population: 11.5 million\nPopulation density: 375 people per square km",
caption = "Data: Statbel (2020 census) | Graphic: Abhinav Malasi",
fill="Population density\n(people per square km)")+
viridis::scale_fill_viridis(option = "D",
trans = "pseudo_log",
breaks = c(0,25, 250, 2500, 20000),
labels = c(0,25, 250, 2500, 20000))+
guides(fill = guide_colorbar(label.position = "left",
title.hjust = 0.5,label.hjust = 1.5)) +
theme_void() +
theme(plot.background = element_rect(fill=bg,color=bg),
panel.background = element_rect(fill=bg,color=bg),
plot.title = element_text(size=170, face = "bold",margin=margin(t=20,b=10),hjust=.1),
plot.subtitle = element_text(size=40,face = "bold",lineheight = .35,hjust=.1),
plot.caption = element_text(size=30,margin = margin(t=10,b=10,r=20)),
plot.margin = margin(t=20,b=10,20,r=20),
legend.title = element_text(size=40,lineheight=.25),
legend.position = c(.2,.2),
legend.key.width = unit(0.5, "line"),
legend.text = element_text(size=35),
legend.background = element_rect(fill=bg,color=bg),
legend.key = element_rect(fill=bg,color=bg),
text=element_text(family=text,color=txt))
ggsave("hexagon.png",commune,width = 10,height = 10,units = "in",dpi=320)
setwd("~/R/30DayMapChallenge/2022/15_food_drink")
library(tidyverse)
library(sf)
meat <- read_csv("per-capita-meat-type.csv") %>%
janitor::clean_names() %>%
filter(year==2019) %>% na.omit()
colnames(meat)[4:9]<- c("poultry","beef","sheep_goat","pork","others","seafood")
countries <- st_read("~/R/30DayMapChallenge/2022/3_polygons/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp")
meat$max <- apply(meat[,4:9], 1, max)
meat <- meat %>% mutate(pop_meat = case_when(max == poultry ~ "Poultry",
max == beef ~ "Beef",
max == sheep_goat ~ "Sheep & Goat",
max == pork ~ "Pork",
max == others ~ "Others",
TRUE~"Fish & Seafood"))
world_meat <- merge(countries %>% select(ISO_A3), meat %>% select(1,2,11), by.x="ISO_A3", by.y="code")
countries <- st_read("~/R/30DayMapChallenge/2022/3_polygons/ne_10m_admin_0_countries/ne_10m_admin_0_countries.shp")
world_meat <- merge(countries %>% select(ISO_A3), meat %>% select(1,2,11), by.x="ISO_A3", by.y="code")
countries %>% select(ISO_A3)
library(tidyverse)
countries %>% select(ISO_A3)
